# -*- coding: utf-8 -*-
"""Facebook prophet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cERRgwnulScgj3bzHeqoet4SYN6f1Sza

# Importation des bibliothèques
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as dates
from datetime import datetime

# Facebook Prophet
!pip install fbprophet
from fbprophet import Prophet
from fbprophet.diagnostics import cross_validation
from fbprophet.diagnostics import performance_metrics
from fbprophet.plot import plot_cross_validation_metric
from fbprophet import hdays
!pip install holidays
import holidays

"""# Importation et visualisation des données"""

# Si vous utilisez Colab

# !mkdir Data
# !wget --no-check-certificate -r "https://raw.githubusercontent.com/facebook/prophet/master/examples/example_retail_sales.csv" -O "Data/RetailSales.csv"

RetailSalesDataframe = pd.read_csv("./Data/RetailSales.csv", delimiter=",")
RetailSalesDataframe["ds"] = pd.to_datetime(RetailSalesDataframe["ds"], infer_datetime_format=True)
RetailSalesDataframe["y"] = pd.to_numeric(RetailSalesDataframe["y"])
indexedDataframe = RetailSalesDataframe.set_index(["ds"])

print("--- Head and tail of dataframe ---\n")

print(RetailSalesDataframe.head(5))
print(RetailSalesDataframe.tail(5))

print("\n--- Dataframe infos ---\n")

RetailSalesDataframe.info()

Roolmean = indexedDataframe.rolling(window = 12).mean()
Roolstd = indexedDataframe.rolling(window = 12).std()
print(Roolmean, Roolstd)

orig = plt.plot(indexedDataframe, color = "blue", label = "Original")
mean = plt.plot(Roolmean, color = "red", label = "Moyenne mobile")
std = plt.plot(Roolstd, color = "black", label = "Ecart type")
plt.legend(loc = "best")
plt.title("Tendance des ventes par date avec la moyenne mobile et la variance")
plt.rcParams["figure.figsize"] = [15,9]
plt.show(block = False)

ye1 = plt.plot(indexedDataframe[0:11], color = "blue", label = "1992")
ye2 = plt.plot(indexedDataframe[12:23], color = "orange", label = "1993")
ye3 = plt.plot(indexedDataframe[24:35], color = "green", label = "1994")
ye4 = plt.plot(indexedDataframe[36:47], color = "red", label = "1995")
plt.legend(loc = "best")
plt.title("Tendance des ventes par date sur 4 années")
plt.show(block = False)

"""Courbe dont l'alure est non stationnaire et suit une tendence saisonière avec peu de ventes sur les 1ers mois de l'année. Les ventes augmentent de façon significtives pendant l'été et retombent après le mois d'aout et reprennent pendant la periode de noel."""

crisis08 = plt.plot(indexedDataframe.loc['2008-01-01':'2008-12-30'], color = "blue", label = "2008")
crisis09 = plt.plot(indexedDataframe.loc['2009-01-01':'2009-12-30'], color = "red", label = "2009")
crisis09 = plt.plot(indexedDataframe.loc['2010-01-01':'2010-12-30'], color = "green", label = "2010")
plt.legend(loc = "best")
plt.title("Tendance des ventes par date sur la période après crise de 2008")
plt.show(block = False)

"""Le graphe précedent relate l'impact de la crise financiere de 2008 sur le nombre de ventes. En effet, les ventes ont baissé durant l'année 2009 pour reprendre la tendance positive progressive à partir de 2010.

# Creation du modèle Prophet
"""

prophetModel = Prophet(seasonality_mode='multiplicative')

prophetModel = prophetModel.fit(RetailSalesDataframe)

future = prophetModel.make_future_dataframe(periods=60, freq='M')

forecast = prophetModel.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

fig1 = prophetModel.plot(forecast)

fig2 = prophetModel.plot_components(forecast)

"""# Evaluation du modèle"""

df_cv = cross_validation(prophetModel, initial = '7665 days', period = '30 days', horizon = '180 days')
df_p = performance_metrics(df_cv)
df_p

fig = plot_cross_validation_metric(df_cv, metric='mape')

"""# BONUS : Integration des jours fériés, vacances et événements speciaux de l'année

La bibliothèque de Prophet propose deja une integration des jours spéciaux sur plusieurs pays et qui sont :
Brazil (BR), Indonesia (ID), India (IN), Malaysia (MY), Vietnam (VN), Thailand (TH), Philippines (PH), Turkey (TU), Pakistan (PK), Bangladesh (BD), Egypt (EG), China (CN), and Russian (RU) accessibles à travers hdays.nomPays_ou_codeISO qui est la classe qui donne accès à plusieurs methodes de generation de jours spéciaux pour ces pays
"""

russiaHdays = hdays.Russia()

russiaHdays._populate(2020)
russiaHdays

"""Si ces pays ne correspondent pas à vos attentes, une biliothèque disponible sur le lien suivant propose plusieurs pays dont les Etats Unis, la France ... Et comme notre heu de données correspond à des ventes en US, il faudrai integrer ces jours spéciaux des Etats Unis."""

print(holidays.list_supported_countries())

usaHdays = holidays.UnitedStates()

usaHdays._populate(2020)
usaHdays

tmpUsaHdays = holidays.UnitedStates()
for y in range(1992,2016):
  tmpUsaHdays._populate(y)

holidaysDataframe = pd.DataFrame.from_dict(tmpUsaHdays, orient='index')
holidaysDataframe = holidaysDataframe.reset_index()
holidaysDataframe.columns = ["ds", "holiday"]

"""Pour les integrer, rien de plus simple:"""

prophetModel = Prophet(holidays = holidaysDataframe, seasonality_mode='multiplicative')